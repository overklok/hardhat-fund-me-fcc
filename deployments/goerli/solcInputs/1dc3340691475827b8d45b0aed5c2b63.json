{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum value in USD\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\n// 837273\n// 817755\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  address[] public funders;\n  mapping(address => uint256) public addressToAmountFunded;\n  uint256 public MINIMUM_USD = 50 * 1e18;\n\n  address public /* immutable */ owner;\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  function fund() public payable {\n    // Want to be able to set a minumum fund amount in USD\n    require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send anough!\");\n\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] = msg.value;\n  }\n\n  function widthdraw() public onlyOwner {\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      // code\n      address funder = funders[funderIndex];\n      addressToAmountFunded[funder] = 0;\n    }\n\n    // reset the array\n    funders = new address[](0);\n\n    // call\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call falied\");\n\n    // msg.sender = address\n    // payable(msg.sender) = payable address\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner, \"Sender is not owner!\");\n    _;\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    // ETH in terms of USD\n    // 3000.00000000\n    return uint256(price * 1e10);\n  }\n\n  function getVersion() internal view returns (uint256) {\n    AggregatorV3Interface priceFeed = AggregatorV3Interface(\n      0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    );\n    return priceFeed.version();\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
